<?php
/* ActiveFusions 2015/10/05 9:44 */

namespace Plugin\Holiday\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * Holiday
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HolidayRepository extends EntityRepository{

	/**
	* find all
	*
	* @return type
	**/
	public function findAll(){
		$em = $this->getEntityManager();
		$query = $em->createQuery('SELECT m FROM Plugin\Holiday\Entity\Holiday m ORDER BY m.month,m.day ASC');
		$result = $query->getResult(Query::HYDRATE_ARRAY);
		return $result;
	}

	/**
	* find month day
	*
	* @return type
	**/
	public function findMonthDay($month){
		$em = $this->getEntityManager();
		$query = $em->createQuery('SELECT m.day FROM Plugin\Holiday\Entity\Holiday m WHERE m.month = :month ORDER BY m.month,m.day ASC');
		$query->setParameter('month', $month);
		$result = $query->getResult(Query::HYDRATE_ARRAY);
		return $result;
	}

	/**
	* @param  \Plugin\Holiday\Entity\Holiday $Holiday
	* @return void
	**/
	public function up(\Plugin\Holiday\Entity\Holiday $Holiday){
		$em = $this->getEntityManager();
		$em->getConnection()->beginTransaction();
		try {
			$rank = $Holiday->getRank();
			$HolidayUp = $this->createQueryBuilder('m')->where('m.rank > :rank')->setParameter('rank', $rank)->orderBy('m.rank', 'ASC')->setMaxResults(1)->getQuery()->getSingleResult();
			$Holiday->setRank($HolidayUp->getRank());
			$HolidayUp->setRank($rank);
			$em->persist($Holiday);
			$em->persist($HolidayUp);
			$em->flush();
			$em->getConnection()->commit();
		} catch (\Exception $e) {
			$em->getConnection()->rollback();
			return false;
		}
		return true;
	}

	/**
	* @param  \Plugin\Holiday\Entity\Holiday $Holiday
	* @return bool
	**/
	public function down(\Plugin\Holiday\Entity\Holiday $Holiday){
		$em = $this->getEntityManager();
		$em->getConnection()->beginTransaction();
		try {
			$rank = $Holiday->getRank();
			$HolidayDown = $this->createQueryBuilder('m')->where('m.rank < :rank ')->setParameter('rank', $rank)->orderBy('m.rank', 'DESC')->setMaxResults(1)->getQuery()->getSingleResult();
			$Holiday->setRank($HolidayDown->getRank());
			$HolidayDown->setRank($rank);
			$em->persist($Holiday);
			$em->persist($HolidayDown);
			$em->flush();
			$em->getConnection()->commit();
		} catch (\Exception $e) {
			$em->getConnection()->rollback();
			return false;
		}
		return true;
	}

	/**
	* @param  \Plugin\Holiday\Entity\Holiday $Holiday
	* @return bool
	*/
	public function save(\Plugin\Holiday\Entity\Holiday $Holiday){
		$em = $this->getEntityManager();
		$em->getConnection()->beginTransaction();
		try {
			if(!$Holiday->getId()) {
				$rank = $this->createQueryBuilder('m')->select('MAX(m.rank)')->getQuery()->getSingleScalarResult();
				if(!$rank) {
					$rank = 0;
				}
				$Holiday->setRank($rank + 1);
				$Holiday->setDelFlg(0);
				$em->createQueryBuilder()->update('Plugin\Holiday\Entity\Holiday', 'm')->set('m.rank', 'm.rank + 1')->where('m.rank > :rank')->setParameter('rank', $rank)->getQuery()->execute();
			}
			$em->persist($Holiday);
			$em->flush();
			$em->getConnection()->commit();
		} catch (\Exception $e) {
			$em->getConnection()->rollback();
			return false;
		}
		return true;
	}

	/**
	* @param  \Plugin\Holiday\Entity\Holiday $Holiday
	* @return bool
	**/
	public function delete(\Plugin\Holiday\Entity\Holiday $Holiday){
		$em = $this->getEntityManager();
		$em->getConnection()->beginTransaction();
		try {
			$Holiday->setDelFlg(1);
			$em->persist($Holiday);
			$em->flush();
			$em->getConnection()->commit();
		} catch (\Exception $e) {
			$em->getConnection()->rollback();
			return false;
		}
		return true;
	}
}
